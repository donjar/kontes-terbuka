.container
  %h1 Ringkasan

  - if can_see_summary?
    %h2 Total (tanpa veteran)
    %table.table.table-condensed.table-striped.table-responsive
      %thead
        = create_data_row(['Nilai', '#', 'Kumulatif', 'Tanpa 0', 'Balik',
                           '% untuk cutoff', '% balik'], 'th')
      %tbody
        - @scores.length.times do |mark|
          - count = (@count - @scores[0]).to_f
          - total = @scores.take(mark + 1).sum
          - if mark == 0
            - rev = @count
          - else
            - rev = @count - @scores.take(mark).sum
          = create_data_row([mark, @scores[mark], total, total - @scores[0],
                             rev,
                             percentage((total - @scores[0]) / count),
                             percentage(rev / count)],
                             'td')

  %h2 Isian
  %table.table.table-condensed.table-striped.table-responsive
    %thead
      = create_data_row(['No.', 'Soal', 'Jawaban', '# Benar', '% Benar',
                         'Jawaban terbanyak', '# Jawaban', '% Jawab'], 'th')

    %tbody
      - @short_problems.each do |sp|
        - most = sp.most_answer
        %tr
          %td= sp.problem_no
          = latex_and_markdown :td, sp.statement
          %td= sp.answer
          %td= sp.correct_answers
          %td= percentage average sp.correct_answers
          %td= most.map(&:answer)
          %td= most.empty? ? 0 : most[0].count
          %td= percentage average(most.empty? ? 0 : most[0].count)

  %h2 Uraian
  %table.table.table-condensed.table-striped.table-responsive
    %thead
      = create_data_row(['No.', 'Soal', '-'] + (0..LongProblem.where(contest_id: params[:id]).maximum("max_score")).to_a + ['Rata-rata'],
                        'th')

    %tbody
      - @long_problems.each do |lp|
        - ls = lp.long_submissions
        %tr
          %td= lp.problem_no
          = latex_and_markdown :td, lp.statement
          %td= ls.where(score: nil).count
          - (LongProblem.find(lp.id).max_score + 1).times do |i|
            %td= ls.where(score: i).count
          %td= average_mark(ls)
